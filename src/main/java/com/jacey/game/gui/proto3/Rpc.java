// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package com.jacey.game.gui.proto3;

public final class Rpc {
  private Rpc() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * 客户端与服务器通讯协议名
   * </pre>
   *
   * Protobuf enum {@code com.jacey.game.gui.proto3.RpcNameEnum}
   */
  public enum RpcNameEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 由于proto3中enum首位必须是0所以设置该标识字段
     * </pre>
     *
     * <code>None = 0;</code>
     */
    None(0),
    /**
     * <pre>
     * 注册
     * </pre>
     *
     * <code>Regist = 101;</code>
     */
    Regist(101),
    /**
     * <pre>
     * 登录
     * </pre>
     *
     * <code>Login = 102;</code>
     */
    Login(102),
    /**
     * <pre>
     * 对战匹配
     * </pre>
     *
     * <code>Match = 111;</code>
     */
    Match(111),
    /**
     * <pre>
     * 取消对战匹配
     * </pre>
     *
     * <code>CancelMatch = 112;</code>
     */
    CancelMatch(112),
    /**
     * <pre>
     * ------------- 对战相关 -------------
     * </pre>
     *
     * <code>GetBattleInfo = 6001;</code>
     */
    GetBattleInfo(6001),
    /**
     * <pre>
     * 投降认输
     * </pre>
     *
     * <code>Concede = 6002;</code>
     */
    Concede(6002),
    /**
     * <pre>
     * 落子
     * </pre>
     *
     * <code>PlacePieces = 6003;</code>
     */
    PlacePieces(6003),
    /**
     * <pre>
     * 客户端发现当前回合玩家超时未行动，请求服务器强制结束回合
     * </pre>
     *
     * <code>ForceEndTurn = 6004;</code>
     */
    ForceEndTurn(6004),
    /**
     * <pre>
     * 确认可以开始游戏
     * </pre>
     *
     * <code>ReadyToStartGame = 6005;</code>
     */
    ReadyToStartGame(6005),
    /**
     * <pre>
     * 超时未确认可以开始游戏，则强制开始游戏
     * </pre>
     *
     * <code>ForceReadyToStartGame = 6006;</code>
     */
    ForceReadyToStartGame(6006),
    /**
     * <pre>
     * ------------(聊天相关) - (10001-14000)-------------------------
     * </pre>
     *
     * <code>JoinChatRoom = 10001;</code>
     */
    JoinChatRoom(10001),
    /**
     * <pre>
     * 对战聊天请求
     * </pre>
     *
     * <code>BattleChatText = 10002;</code>
     */
    BattleChatText(10002),
    /**
     * <pre>
     * ------------- 服务器推送 -------------
     * </pre>
     *
     * <code>ForceOfflinePush = 20001;</code>
     */
    ForceOfflinePush(20001),
    /**
     * <pre>
     * 主逻辑服务器推送给玩家匹配结果
     * </pre>
     *
     * <code>MatchResultPush = 21001;</code>
     */
    MatchResultPush(21001),
    /**
     * <pre>
     * 战斗服务器推送给玩家场上发生的事件信息
     * </pre>
     *
     * <code>BattleEventMsgListPush = 22001;</code>
     */
    BattleEventMsgListPush(22001),
    /**
     * <pre>
     * 聊天服务器推送对战聊天内容
     * </pre>
     *
     * <code>BattleChatTextPush = 23001;</code>
     */
    BattleChatTextPush(23001),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 由于proto3中enum首位必须是0所以设置该标识字段
     * </pre>
     *
     * <code>None = 0;</code>
     */
    public static final int None_VALUE = 0;
    /**
     * <pre>
     * 注册
     * </pre>
     *
     * <code>Regist = 101;</code>
     */
    public static final int Regist_VALUE = 101;
    /**
     * <pre>
     * 登录
     * </pre>
     *
     * <code>Login = 102;</code>
     */
    public static final int Login_VALUE = 102;
    /**
     * <pre>
     * 对战匹配
     * </pre>
     *
     * <code>Match = 111;</code>
     */
    public static final int Match_VALUE = 111;
    /**
     * <pre>
     * 取消对战匹配
     * </pre>
     *
     * <code>CancelMatch = 112;</code>
     */
    public static final int CancelMatch_VALUE = 112;
    /**
     * <pre>
     * ------------- 对战相关 -------------
     * </pre>
     *
     * <code>GetBattleInfo = 6001;</code>
     */
    public static final int GetBattleInfo_VALUE = 6001;
    /**
     * <pre>
     * 投降认输
     * </pre>
     *
     * <code>Concede = 6002;</code>
     */
    public static final int Concede_VALUE = 6002;
    /**
     * <pre>
     * 落子
     * </pre>
     *
     * <code>PlacePieces = 6003;</code>
     */
    public static final int PlacePieces_VALUE = 6003;
    /**
     * <pre>
     * 客户端发现当前回合玩家超时未行动，请求服务器强制结束回合
     * </pre>
     *
     * <code>ForceEndTurn = 6004;</code>
     */
    public static final int ForceEndTurn_VALUE = 6004;
    /**
     * <pre>
     * 确认可以开始游戏
     * </pre>
     *
     * <code>ReadyToStartGame = 6005;</code>
     */
    public static final int ReadyToStartGame_VALUE = 6005;
    /**
     * <pre>
     * 超时未确认可以开始游戏，则强制开始游戏
     * </pre>
     *
     * <code>ForceReadyToStartGame = 6006;</code>
     */
    public static final int ForceReadyToStartGame_VALUE = 6006;
    /**
     * <pre>
     * ------------(聊天相关) - (10001-14000)-------------------------
     * </pre>
     *
     * <code>JoinChatRoom = 10001;</code>
     */
    public static final int JoinChatRoom_VALUE = 10001;
    /**
     * <pre>
     * 对战聊天请求
     * </pre>
     *
     * <code>BattleChatText = 10002;</code>
     */
    public static final int BattleChatText_VALUE = 10002;
    /**
     * <pre>
     * ------------- 服务器推送 -------------
     * </pre>
     *
     * <code>ForceOfflinePush = 20001;</code>
     */
    public static final int ForceOfflinePush_VALUE = 20001;
    /**
     * <pre>
     * 主逻辑服务器推送给玩家匹配结果
     * </pre>
     *
     * <code>MatchResultPush = 21001;</code>
     */
    public static final int MatchResultPush_VALUE = 21001;
    /**
     * <pre>
     * 战斗服务器推送给玩家场上发生的事件信息
     * </pre>
     *
     * <code>BattleEventMsgListPush = 22001;</code>
     */
    public static final int BattleEventMsgListPush_VALUE = 22001;
    /**
     * <pre>
     * 聊天服务器推送对战聊天内容
     * </pre>
     *
     * <code>BattleChatTextPush = 23001;</code>
     */
    public static final int BattleChatTextPush_VALUE = 23001;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RpcNameEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static RpcNameEnum forNumber(int value) {
      switch (value) {
        case 0: return None;
        case 101: return Regist;
        case 102: return Login;
        case 111: return Match;
        case 112: return CancelMatch;
        case 6001: return GetBattleInfo;
        case 6002: return Concede;
        case 6003: return PlacePieces;
        case 6004: return ForceEndTurn;
        case 6005: return ReadyToStartGame;
        case 6006: return ForceReadyToStartGame;
        case 10001: return JoinChatRoom;
        case 10002: return BattleChatText;
        case 20001: return ForceOfflinePush;
        case 21001: return MatchResultPush;
        case 22001: return BattleEventMsgListPush;
        case 23001: return BattleChatTextPush;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RpcNameEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RpcNameEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RpcNameEnum>() {
            public RpcNameEnum findValueByNumber(int number) {
              return RpcNameEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.jacey.game.gui.proto3.Rpc.getDescriptor().getEnumTypes().get(0);
    }

    private static final RpcNameEnum[] VALUES = values();

    public static RpcNameEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RpcNameEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.jacey.game.gui.proto3.RpcNameEnum)
  }

  /**
   * <pre>
   * 客户端与服务器通讯协议错误码
   * </pre>
   *
   * Protobuf enum {@code com.jacey.game.gui.proto3.RpcErrorCodeEnum}
   */
  public enum RpcErrorCodeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 正常
     * </pre>
     *
     * <code>Ok = 0;</code>
     */
    Ok(0),
    /**
     * <pre>
     * 服务器内部错误
     * </pre>
     *
     * <code>ServerError = 1;</code>
     */
    ServerError(1),
    /**
     * <pre>
     * 客户端请求参数非法
     * </pre>
     *
     * <code>ClientError = 2;</code>
     */
    ClientError(2),
    /**
     * <pre>
     * 服务器当前不可用
     * </pre>
     *
     * <code>ServerNotAvailable = 3;</code>
     */
    ServerNotAvailable(3),
    /**
     * <pre>
     * 玩家不在对战中
     * </pre>
     *
     * <code>UserNotInBattle = 11;</code>
     */
    UserNotInBattle(11),
    /**
     * <pre>
     * 游戏尚未开始（需双方都确认ReadyToStartGame）
     * </pre>
     *
     * <code>BattleNotStart = 12;</code>
     */
    BattleNotStart(12),
    /**
     * <pre>
     * 不是该玩家的回合
     * </pre>
     *
     * <code>IsNotUserTurn = 13;</code>
     */
    IsNotUserTurn(13),
    /**
     * <pre>
     * 客户端请求对战操作时附带的lastEventNum错误，说明发生丢包
     * </pre>
     *
     * <code>InputLastEventNumError = 14;</code>
     */
    InputLastEventNumError(14),
    /**
     * <pre>
     * 无法注册，用户名已存在
     * </pre>
     *
     * <code>RegisErrorUsernameIsExist = 1011;</code>
     */
    RegisErrorUsernameIsExist(1011),
    /**
     * <pre>
     * 无法注册，用户名非法
     * </pre>
     *
     * <code>RegisErrorUsernameIllegal = 1012;</code>
     */
    RegisErrorUsernameIllegal(1012),
    /**
     * <pre>
     * 无法注册，密码非法
     * </pre>
     *
     * <code>RegisErrorPasswordIllegal = 1013;</code>
     */
    RegisErrorPasswordIllegal(1013),
    /**
     * <pre>
     * 无法登录，用户名不存在
     * </pre>
     *
     * <code>LoginErrorUsernameIsNotExist = 1021;</code>
     */
    LoginErrorUsernameIsNotExist(1021),
    /**
     * <pre>
     * 无法登录，密码错误
     * </pre>
     *
     * <code>LoginErrorPasswordWrong = 1022;</code>
     */
    LoginErrorPasswordWrong(1022),
    /**
     * <pre>
     * 无法登录，账号被封禁
     * </pre>
     *
     * <code>LoginErrorForbid = 1023;</code>
     */
    LoginErrorForbid(1023),
    /**
     * <pre>
     * 无法匹配，目前就是匹配状态
     * </pre>
     *
     * <code>MatchErrorMatching = 1111;</code>
     */
    MatchErrorMatching(1111),
    /**
     * <pre>
     * 无法匹配，已经在对战中
     * </pre>
     *
     * <code>MatchErrorPlaying = 1112;</code>
     */
    MatchErrorPlaying(1112),
    /**
     * <pre>
     * 无法匹配，处于其他状态
     * </pre>
     *
     * <code>MatchErrorOtherActionState = 1113;</code>
     */
    MatchErrorOtherActionState(1113),
    /**
     * <pre>
     * 取消匹配失败，已经在对战中
     * </pre>
     *
     * <code>CancelMatchErrorPlaying = 1121;</code>
     */
    CancelMatchErrorPlaying(1121),
    /**
     * <pre>
     * 取消匹配失败，没有在匹配中
     * </pre>
     *
     * <code>CancelMatchErrorNotMatching = 1122;</code>
     */
    CancelMatchErrorNotMatching(1122),
    /**
     * <pre>
     * 请求落子错误，要落子的位置非法
     * </pre>
     *
     * <code>PlacePiecesErrorIndexError = 60031;</code>
     */
    PlacePiecesErrorIndexError(60031),
    /**
     * <pre>
     * 请求落子错误，要落子的位置已经有棋子
     * </pre>
     *
     * <code>PlacePiecesErrorIndexIsNotEmpty = 60032;</code>
     */
    PlacePiecesErrorIndexIsNotEmpty(60032),
    /**
     * <pre>
     * 确认可以开始游戏错误，已经确认过了
     * </pre>
     *
     * <code>ReadyToStartGameErrorAlreadyReady = 60051;</code>
     */
    ReadyToStartGameErrorAlreadyReady(60051),
    /**
     * <pre>
     * 请求强制开始游戏错误，游戏已经开始了
     * </pre>
     *
     * <code>ForceReadyToStartGameErrorAlreadyStart = 60052;</code>
     */
    ForceReadyToStartGameErrorAlreadyStart(60052),
    /**
     * <pre>
     * 对战聊天发送失败，未加入对战
     * </pre>
     *
     * <code>BattleChatTextErrorNotJoinBattle = 100021;</code>
     */
    BattleChatTextErrorNotJoinBattle(100021),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 正常
     * </pre>
     *
     * <code>Ok = 0;</code>
     */
    public static final int Ok_VALUE = 0;
    /**
     * <pre>
     * 服务器内部错误
     * </pre>
     *
     * <code>ServerError = 1;</code>
     */
    public static final int ServerError_VALUE = 1;
    /**
     * <pre>
     * 客户端请求参数非法
     * </pre>
     *
     * <code>ClientError = 2;</code>
     */
    public static final int ClientError_VALUE = 2;
    /**
     * <pre>
     * 服务器当前不可用
     * </pre>
     *
     * <code>ServerNotAvailable = 3;</code>
     */
    public static final int ServerNotAvailable_VALUE = 3;
    /**
     * <pre>
     * 玩家不在对战中
     * </pre>
     *
     * <code>UserNotInBattle = 11;</code>
     */
    public static final int UserNotInBattle_VALUE = 11;
    /**
     * <pre>
     * 游戏尚未开始（需双方都确认ReadyToStartGame）
     * </pre>
     *
     * <code>BattleNotStart = 12;</code>
     */
    public static final int BattleNotStart_VALUE = 12;
    /**
     * <pre>
     * 不是该玩家的回合
     * </pre>
     *
     * <code>IsNotUserTurn = 13;</code>
     */
    public static final int IsNotUserTurn_VALUE = 13;
    /**
     * <pre>
     * 客户端请求对战操作时附带的lastEventNum错误，说明发生丢包
     * </pre>
     *
     * <code>InputLastEventNumError = 14;</code>
     */
    public static final int InputLastEventNumError_VALUE = 14;
    /**
     * <pre>
     * 无法注册，用户名已存在
     * </pre>
     *
     * <code>RegisErrorUsernameIsExist = 1011;</code>
     */
    public static final int RegisErrorUsernameIsExist_VALUE = 1011;
    /**
     * <pre>
     * 无法注册，用户名非法
     * </pre>
     *
     * <code>RegisErrorUsernameIllegal = 1012;</code>
     */
    public static final int RegisErrorUsernameIllegal_VALUE = 1012;
    /**
     * <pre>
     * 无法注册，密码非法
     * </pre>
     *
     * <code>RegisErrorPasswordIllegal = 1013;</code>
     */
    public static final int RegisErrorPasswordIllegal_VALUE = 1013;
    /**
     * <pre>
     * 无法登录，用户名不存在
     * </pre>
     *
     * <code>LoginErrorUsernameIsNotExist = 1021;</code>
     */
    public static final int LoginErrorUsernameIsNotExist_VALUE = 1021;
    /**
     * <pre>
     * 无法登录，密码错误
     * </pre>
     *
     * <code>LoginErrorPasswordWrong = 1022;</code>
     */
    public static final int LoginErrorPasswordWrong_VALUE = 1022;
    /**
     * <pre>
     * 无法登录，账号被封禁
     * </pre>
     *
     * <code>LoginErrorForbid = 1023;</code>
     */
    public static final int LoginErrorForbid_VALUE = 1023;
    /**
     * <pre>
     * 无法匹配，目前就是匹配状态
     * </pre>
     *
     * <code>MatchErrorMatching = 1111;</code>
     */
    public static final int MatchErrorMatching_VALUE = 1111;
    /**
     * <pre>
     * 无法匹配，已经在对战中
     * </pre>
     *
     * <code>MatchErrorPlaying = 1112;</code>
     */
    public static final int MatchErrorPlaying_VALUE = 1112;
    /**
     * <pre>
     * 无法匹配，处于其他状态
     * </pre>
     *
     * <code>MatchErrorOtherActionState = 1113;</code>
     */
    public static final int MatchErrorOtherActionState_VALUE = 1113;
    /**
     * <pre>
     * 取消匹配失败，已经在对战中
     * </pre>
     *
     * <code>CancelMatchErrorPlaying = 1121;</code>
     */
    public static final int CancelMatchErrorPlaying_VALUE = 1121;
    /**
     * <pre>
     * 取消匹配失败，没有在匹配中
     * </pre>
     *
     * <code>CancelMatchErrorNotMatching = 1122;</code>
     */
    public static final int CancelMatchErrorNotMatching_VALUE = 1122;
    /**
     * <pre>
     * 请求落子错误，要落子的位置非法
     * </pre>
     *
     * <code>PlacePiecesErrorIndexError = 60031;</code>
     */
    public static final int PlacePiecesErrorIndexError_VALUE = 60031;
    /**
     * <pre>
     * 请求落子错误，要落子的位置已经有棋子
     * </pre>
     *
     * <code>PlacePiecesErrorIndexIsNotEmpty = 60032;</code>
     */
    public static final int PlacePiecesErrorIndexIsNotEmpty_VALUE = 60032;
    /**
     * <pre>
     * 确认可以开始游戏错误，已经确认过了
     * </pre>
     *
     * <code>ReadyToStartGameErrorAlreadyReady = 60051;</code>
     */
    public static final int ReadyToStartGameErrorAlreadyReady_VALUE = 60051;
    /**
     * <pre>
     * 请求强制开始游戏错误，游戏已经开始了
     * </pre>
     *
     * <code>ForceReadyToStartGameErrorAlreadyStart = 60052;</code>
     */
    public static final int ForceReadyToStartGameErrorAlreadyStart_VALUE = 60052;
    /**
     * <pre>
     * 对战聊天发送失败，未加入对战
     * </pre>
     *
     * <code>BattleChatTextErrorNotJoinBattle = 100021;</code>
     */
    public static final int BattleChatTextErrorNotJoinBattle_VALUE = 100021;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RpcErrorCodeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static RpcErrorCodeEnum forNumber(int value) {
      switch (value) {
        case 0: return Ok;
        case 1: return ServerError;
        case 2: return ClientError;
        case 3: return ServerNotAvailable;
        case 11: return UserNotInBattle;
        case 12: return BattleNotStart;
        case 13: return IsNotUserTurn;
        case 14: return InputLastEventNumError;
        case 1011: return RegisErrorUsernameIsExist;
        case 1012: return RegisErrorUsernameIllegal;
        case 1013: return RegisErrorPasswordIllegal;
        case 1021: return LoginErrorUsernameIsNotExist;
        case 1022: return LoginErrorPasswordWrong;
        case 1023: return LoginErrorForbid;
        case 1111: return MatchErrorMatching;
        case 1112: return MatchErrorPlaying;
        case 1113: return MatchErrorOtherActionState;
        case 1121: return CancelMatchErrorPlaying;
        case 1122: return CancelMatchErrorNotMatching;
        case 60031: return PlacePiecesErrorIndexError;
        case 60032: return PlacePiecesErrorIndexIsNotEmpty;
        case 60051: return ReadyToStartGameErrorAlreadyReady;
        case 60052: return ForceReadyToStartGameErrorAlreadyStart;
        case 100021: return BattleChatTextErrorNotJoinBattle;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RpcErrorCodeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RpcErrorCodeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RpcErrorCodeEnum>() {
            public RpcErrorCodeEnum findValueByNumber(int number) {
              return RpcErrorCodeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.jacey.game.gui.proto3.Rpc.getDescriptor().getEnumTypes().get(1);
    }

    private static final RpcErrorCodeEnum[] VALUES = values();

    public static RpcErrorCodeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RpcErrorCodeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.jacey.game.gui.proto3.RpcErrorCodeEnum)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\trpc.proto\022\031com.jacey.game.gui.proto3*\323" +
      "\002\n\013RpcNameEnum\022\010\n\004None\020\000\022\n\n\006Regist\020e\022\t\n\005" +
      "Login\020f\022\t\n\005Match\020o\022\017\n\013CancelMatch\020p\022\022\n\rG" +
      "etBattleInfo\020\361.\022\014\n\007Concede\020\362.\022\020\n\013PlacePi" +
      "eces\020\363.\022\021\n\014ForceEndTurn\020\364.\022\025\n\020ReadyToSta" +
      "rtGame\020\365.\022\032\n\025ForceReadyToStartGame\020\366.\022\021\n" +
      "\014JoinChatRoom\020\221N\022\023\n\016BattleChatText\020\222N\022\026\n" +
      "\020ForceOfflinePush\020\241\234\001\022\025\n\017MatchResultPush" +
      "\020\211\244\001\022\034\n\026BattleEventMsgListPush\020\361\253\001\022\030\n\022Ba" +
      "ttleChatTextPush\020\331\263\001*\276\005\n\020RpcErrorCodeEnu" +
      "m\022\006\n\002Ok\020\000\022\017\n\013ServerError\020\001\022\017\n\013ClientErro" +
      "r\020\002\022\026\n\022ServerNotAvailable\020\003\022\023\n\017UserNotIn" +
      "Battle\020\013\022\022\n\016BattleNotStart\020\014\022\021\n\rIsNotUse" +
      "rTurn\020\r\022\032\n\026InputLastEventNumError\020\016\022\036\n\031R" +
      "egisErrorUsernameIsExist\020\363\007\022\036\n\031RegisErro" +
      "rUsernameIllegal\020\364\007\022\036\n\031RegisErrorPasswor" +
      "dIllegal\020\365\007\022!\n\034LoginErrorUsernameIsNotEx" +
      "ist\020\375\007\022\034\n\027LoginErrorPasswordWrong\020\376\007\022\025\n\020" +
      "LoginErrorForbid\020\377\007\022\027\n\022MatchErrorMatchin" +
      "g\020\327\010\022\026\n\021MatchErrorPlaying\020\330\010\022\037\n\032MatchErr" +
      "orOtherActionState\020\331\010\022\034\n\027CancelMatchErro" +
      "rPlaying\020\341\010\022 \n\033CancelMatchErrorNotMatchi" +
      "ng\020\342\010\022 \n\032PlacePiecesErrorIndexError\020\377\324\003\022" +
      "%\n\037PlacePiecesErrorIndexIsNotEmpty\020\200\325\003\022\'" +
      "\n!ReadyToStartGameErrorAlreadyReady\020\223\325\003\022" +
      ",\n&ForceReadyToStartGameErrorAlreadyStar" +
      "t\020\224\325\003\022&\n BattleChatTextErrorNotJoinBattl" +
      "e\020\265\215\006B\002H\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
